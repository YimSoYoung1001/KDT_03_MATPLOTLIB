# ---------------------------------------------------------------------------------------------
# 사용자 정의 클래스
# ---------------------------------------------------------------------------------------------
# 클래스 정의 : 밤하느르이 별을 저장하는 데이터
# 클래스 이름 : Star
# 클래스 속성 : 크기, 색상, 밝기, 이름     => 속성(attribute), 필드(field) => 변수
# 클래스 기능 : 반짝거린다, 떨어진다  => 함수(function), 메서드(method) => 함수
# ---------------------------------------------------------------------------------------------
class Star:
    # 클래스 변수/속성/필드 => 해당 클래스 생성된 객체 즉 인스턴스가 공유하는 속성
    timezone = '밤'     #어짜피 계속 같은 속성으로 유지될거라면 클래스 변수로 만든다
    __privateValue = 77  #비공개


    # 최상위 부모 클래스 object로부터 상속받은 함수 즉 메서드
    # 형태 def __XXX__()
    # 나의 클레스 맞도록 수정 즉 리모델링해서 사용 => 오버라이딩(override)
    def __init__(self, size, color, brightness, name='알수없음'):
        print(f'__init__() : {size}, {color}, {brightness}, {name}')
        # 힙 메모리 영역에 저장  =>  속성 데이터의 주소 저장
        #self.size = size       #size의 주소를 size라는 변수명에 저장
        self.__size = size       #비공개변수로 설정되어서 자동완성으로 뜨지 않음
        self.color = color
        self.brightness = brightness
        self.name = name
        #self.timezone = timezone

    # 별 클래스의 기능 => 메서드
    def drop(self):
        print(f'{self.name} 별이 하늘에서 떨어집니다. 소원비셈!')
        print(f'{self.color} 별이 하늘에서 떨어집니다. 소원비셈!')

    # 비공개 인스턴스의 속성에 접근하기 위한 메서드 => getter/setter 메서드
    # 비공개 인스턴스의 속성 읽어오는 메서드 get속성명() ===> 속성값
    # 비공개 인스턴스의 속성에 값 설정하는 메서드 set속성명(새로운값)
    def getsize(self):                         #읽기 (클래스 밖에서 비공개 인스턴스 간접 접근 가능)
        return self.__size

    def setsize(self, size):                   #값변경 (클래스 밖에서 비공개 인스턴스 간접 접근 가능)
        self.__size = size

    # 비공개 인스턴스 메서드 => 클래스 내부에서만 호출되는 메서드 -------------------------------------
    def __inner(self):
        print('나는 비공개 인스턴스 메서드')

    # @property  #데코레이터 문법 (이 함수는 이런 기능을 한다라고 부가설명해줌)

    # 객체 즉 인스턴스 생성 없이 사용하는 메서드
    @staticmethod
    def add():
        pass
    @classmethod
    def cc(cls):
        pass


# ---------------------------------------------------------------------------------------------
# 객체 생성 => 클래스에 정의된 속성 즉 변수와 함수들이 메모리 힙 영역에 생성
# 생성 방법 => 클래스명( ) 생성자 함수/메서드
#            클래스명(매개변수1) 생성자 함수/메서드
#            클래스명(매개변수1, 매개변수2, ..., 매개변수N) 생성자 함수/메서드
#             - 여기서 매개변수라 함은 속성을 의미한다.
# ---------------------------------------------------------------------------------------------
myStar = Star(5, 'dark yellow', 10)        #변수를 지정하여 힙 영역에 저장된 객체의 주소를 변수에 저장함
yourStart = Star(10, 'red', 20, 'RedSTAR')


# ---------------------------------------------------------------------------------------------
# 객체의 메서드 실행 => 객체변수명.메서드명()
# ---------------------------------------------------------------------------------------------
myStar.drop()
yourStart.drop()


# ---------------------------------------------------------------------------------------------
# 객체의 속성 정보 읽기 => 객체변수명.속성명
# ---------------------------------------------------------------------------------------------
# 인스턴스 속성에 직접 접근
print(myStar.color, myStar.brightness, myStar.timezone)            #myStar의 color 변수에 접근해서 그 주소를 print
print(yourStart.color, yourStart.brightness, yourStart.timezone)

#print(myStar.__size)     # => AttributeError: 'Star' object has no attribute '__size'

# 인스턴스 속성에 간접 접근 => 메서드 제공 필수 getter/setter 메서드 ==> 개발자 선택 사항
# 간접점근이면 점 찍고 자동완성으로 접근 불가능
print('현재 비공개 속성값 읽기: ', myStar.getsize())
myStar.setsize(100)
print('현재 비공개 속성값 변경: ',myStar.getsize())


# ---------------------------------------------------------------------------------------------
# 객체의 속성 정보 변경 => 객체변수명.속성명 = 새로운값
# ---------------------------------------------------------------------------------------------
myStar.brightness = 7
print(myStar.brightness)





# ---------------------------------------------------------------------------------------------
# 객체의 속성 정보 변경 => 객체변수명.속성명 = 새로운 값
# ---------------------------------------------------------------------------------------------
print(f'클래스명.__dict__ : \n {Star.__dict__}')
print(f'인스턴스명.__dict__ : \n {myStar.__dict__}')
print(f'인스턴스명.__dict__ : \n {yourStart.__dict__}')

